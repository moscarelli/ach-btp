/// <reference types="node" />
import { PathLike } from 'fs';
/**
 * Options to configure the client generation when using the generator programmatically.
 */
export interface GeneratorOptions {
    /**
     * This directory will be recursively searched for `.edmx`/`.xml` files.
     */
    inputDir: PathLike;
    /**
     * Directory to save the generated code in.
     */
    outputDir: PathLike;
    /**
     * Configuration file to ensure consistent names between multiple generation runs with updated / changed metadata files.
     * Will be generated if not existent.
     * Default set to `inputDir/service-mapping.json`.
     */
    serviceMapping?: PathLike;
    /**
     * Specify the path to the prettier config. If not given a default config will be used for the generated sources.
     */
    prettierConfig?: PathLike;
    /**
     * If set to true, swagger definitions (JSON) are used for generation.
     */
    useSwagger?: boolean;
    /**
     * @deprecated Since v2.12.0. Use `readme` instead.
     * Generate default `README.md` files in the client directories.
     */
    writeReadme?: boolean;
    /**
     * Generate default `README.md` files in the client directories.
     */
    readme?: boolean;
    /**
     * Include files matching the given glob into the root of each generated client directory.
     */
    include?: string;
    /**
     * @deprecated Since v2.12.0. Use `overwrite` instead.
     * Exit when encountering a file that already exists.
     * When set to true, it will be overwritten instead.
     * Please note that compared to the `clearOutputDir` option, this will not delete outdated files.
     */
    forceOverwrite?: boolean;
    /**
     * Exit when encountering a file that already exists.
     * When set to true, it will be overwritten instead.
     * Note, that compared to the `clearOutputDir` option, this will not delete outdated files.
     */
    overwrite?: boolean;
    /**
     * Delete EVERYTHING in the specified output directory before generating code.
     */
    clearOutputDir?: boolean;
    /**
     * @deprecated
     * Generate a `.npmrc` file specifying a registry for `@sap` scoped dependencies.
     */
    generateNpmrc?: boolean;
    /**
     * @deprecated Since v2.12.0. Use `packageJson` instead.
     * Generate a `package.json` file, specifying dependencies and scripts for compiling and generating documentation.
     */
    generatePackageJson?: boolean;
    /**
     * Generate a `package.json` file, specifying dependencies and scripts for compiling and generating documentation.
     */
    packageJson?: boolean;
    /**
     * @deprecated Since v2.12.0.
     * By default, when generating `package.json` file, the generator will set a version by using the generator version.
     * It can also be set to a specific version.
     */
    versionInPackageJson?: string;
    /**
     * @deprecated Since v2.12.0.
     * License name to be used on the generated package.json. Only considered if 'packageJson' is enabled.
     */
    licenseInPackageJson?: string;
    /**
     * Generates transpiled `.js`, `.js.map`, `.d.ts` and `.d.ts.map` files. When set to `false`, the generator will only generate `.ts` files.
     */
    generateJs?: boolean;
    /**
     * Hidden option only for internal usage - generate metadata for API hub integration.
     */
    generateSdkMetadata?: boolean;
    /**
     * @deprecated Since v2.12.0.
     * Number of node processes used for transpilation of JavaScript files.
     */
    processesJsGeneration?: number;
    /**
     * Number of node processes used for transpilation of JavaScript files.
     */
    transpilationProcesses?: number;
    /**
     * @deprecated Since v2.12.0.
     * When set to true, the `package.json` of generated services will have the after-version script to internally keep the versions in sync.
     */
    sdkAfterVersionScript?: boolean;
    /**
     * @deprecated Since v2.12.0.
     * Internal option used to adjust the description for S/4HANA cloud systems. Will not be used in the future.
     */
    s4hanaCloud?: boolean;
    /**
     * @deprecated Since v2.12.0.
     * Generate A CSN file for each service definition in the output directory.
     */
    generateCSN?: boolean;
    /**
     * @deprecated Since v2.12.0.
     * Internal option used to adjust the version in the generated `package.json`. Will not be used in the future.
     */
    packageVersion?: string;
}
/**
 * @internal
 */
export declare const defaultValueProcessesJsGeneration = 16;
declare function coercePathArg(arg?: string): string | undefined;
/**
 * Union type of the deprecated option names.
 * @typeParam T - Options configuration.
 */
type DeprecatedOptionNamesWithReplacements<T> = {
    [K in keyof T]: T[K] extends {
        deprecated: string;
        replacedBy: string;
    } ? K : never;
}[keyof T];
/**
 * @internal
 * Helper to represent parsed options based on a public generator options type and a CLI options configuration.
 * @typeParam GeneratorOptionsOptionsT - Public generator options.
 * @typeParam CliOptionsT - Configuration of CLI options.
 */
export type ParsedOptions<GeneratorOptionsOptionsT, CliOptionsT> = Omit<Required<GeneratorOptionsOptionsT>, DeprecatedOptionNamesWithReplacements<CliOptionsT>>;
/**
 * @internal
 * Represents the parsed generator options.
 */
export type ParsedGeneratorOptions = ParsedOptions<GeneratorOptions, typeof generatorOptionsCli>;
/**
 * @internal
 */
export declare const generatorOptionsCli: {
    readonly inputDir: {
        readonly alias: "i";
        readonly describe: "This directory will be recursively searched for `.edmx`/`.xml` files.";
        readonly coerce: typeof coercePathArg;
        readonly type: "string";
        readonly demandOption: true;
        readonly requiresArg: true;
    };
    readonly outputDir: {
        readonly alias: "o";
        readonly describe: "Directory to save the generated code in.";
        readonly coerce: typeof coercePathArg;
        readonly type: "string";
        readonly demandOption: true;
        readonly requiresArg: true;
    };
    readonly serviceMapping: {
        readonly alias: "s";
        readonly describe: "Configuration file to ensure consistent names between multiple generation runs with updated / changed metadata files. Will be generated if not existent. By default it will be saved to/read from the input directory as \"service-mapping.json\".";
        readonly type: "string";
        readonly coerce: typeof coercePathArg;
        readonly normalize: true;
    };
    readonly prettierConfig: {
        readonly alias: "p";
        readonly describe: "Configuration file to the prettier config relative to the generator config file";
        readonly type: "string";
        readonly coerce: typeof coercePathArg;
        readonly normalize: true;
    };
    readonly useSwagger: {
        readonly describe: "Augment parsed information with information from swagger-parser definition files. Files are expected to have the same name as the EDMX file, but with .json as suffix.";
        readonly type: "boolean";
        readonly default: false;
        readonly hidden: true;
    };
    readonly readme: {
        readonly describe: "When set to true, the generator will write a README.md file into the root folder of every package. This option does not make that much sense without also set useSwagger to \"true\".";
        readonly type: "boolean";
        readonly default: false;
        readonly hidden: true;
    };
    readonly writeReadme: {
        readonly describe: "When set to true, the generator will write a README.md file into the root folder of every package. This option does not make that much sense without also set useSwagger to \"true\".";
        readonly type: "boolean";
        readonly default: false;
        readonly hidden: true;
        readonly deprecated: "Since v2.12.0. Use 'readme' instead.";
        readonly replacedBy: "readme";
    };
    readonly include: {
        readonly describe: "Glob describing additional files to be added to the each generated service directory - relative to the inputDir.";
        readonly type: "string";
        readonly coerce: typeof coercePathArg;
        readonly normalize: true;
    };
    readonly overwrite: {
        readonly describe: "By default, the generator will exit when encountering a file that already exists. When set to true, it will be overwritten instead. Please note that compared to the --clearOutputDir option, this will not delete outdated files.";
        readonly type: "boolean";
        readonly default: false;
    };
    readonly forceOverwrite: {
        readonly describe: "By default, the generator will exit when encountering a file that already exists. When set to true, it will be overwritten instead. Please note that compared to the --clearOutputDir option, this will not delete outdated files.";
        readonly type: "boolean";
        readonly default: false;
        readonly deprecated: "Since v2.12.0. Use 'overwrite' instead.";
        readonly replacedBy: "overwrite";
    };
    readonly clearOutputDir: {
        readonly describe: "When set to true, the generator will delete EVERYTHING in the specified output directory before generating code.";
        readonly type: "boolean";
        readonly default: false;
    };
    readonly generateNpmrc: {
        readonly describe: "Has no effect.";
        readonly deprecated: "Since v2.8.0. This option does not have any effect anymore.";
        readonly type: "boolean";
        readonly default: false;
    };
    readonly packageJson: {
        readonly describe: "By default, the generator will generate a package.json file, specifying dependencies and scripts for compiling and generating documentation. When set to false, the generator will skip the generation of the package.json.";
        readonly type: "boolean";
        readonly default: true;
    };
    readonly generatePackageJson: {
        readonly describe: "By default, the generator will generate a package.json file, specifying dependencies and scripts for compiling and generating documentation. When set to false, the generator will skip the generation of the package.json.";
        readonly type: "boolean";
        readonly default: true;
        readonly deprecated: "Since v2.12.0. Use 'packageJson' instead.";
        readonly replacedBy: "packageJson";
    };
    readonly versionInPackageJson: {
        readonly describe: "By default, when generating package.json file, the generator will set a version by using the generator version. It can also be set to a specific version.";
        readonly type: "string";
        readonly deprecated: "Since v2.6.0. Use the 'include' option to add your own package.json file instead.";
        readonly replacedBy: "packageVersion";
    };
    readonly licenseInPackageJson: {
        readonly describe: "License to be used on the generated package.json. Only considered if 'generatePackageJson' is enabled.";
        readonly type: "string";
        readonly requiresArg: false;
        readonly deprecated: "Since v2.12.0. Use the 'include' option to add your own package.json file instead.";
    };
    readonly generateJs: {
        readonly describe: "By default, the generator will also generate transpiled .js, .js.map, .d.ts and .d.ts.map files. When set to false, the generator will only generate .ts files.";
        readonly type: "boolean";
        readonly default: true;
    };
    readonly transpilationProcesses: {
        readonly describe: "Number of processes used for generation of javascript files.";
        readonly alias: "np";
        readonly type: "number";
        readonly default: 16;
        readonly hidden: true;
        readonly replacedBy: "processesJsGeneration";
    };
    readonly processesJsGeneration: {
        readonly describe: "Number of processes used for generation of javascript files.";
        readonly alias: "np";
        readonly type: "number";
        readonly default: 16;
        readonly deprecated: "Since v2.12.0. Use 'transpilationProcesses' option to set number of processes for generation instead.";
    };
    readonly sdkAfterVersionScript: {
        readonly describe: "When set to true, the package.json of generated services will have the after-version script to internally keep the versions in sync.";
        readonly type: "boolean";
        readonly default: false;
        readonly hidden: true;
    };
    readonly generateSdkMetadata: {
        readonly describe: "When set to true, SDK metadata for the API hub is generated.";
        readonly type: "boolean";
        readonly default: false;
        readonly hidden: true;
    };
    readonly packageVersion: {
        readonly describe: "Version of the generated package.";
        readonly type: "string";
        readonly default: "1.0.0";
        readonly hidden: true;
    };
    readonly s4hanaCloud: {
        readonly describe: "When set to true, the description of the generated packages will be specific to S/4HANA Cloud.";
        readonly type: "boolean";
        readonly default: false;
        readonly hidden: true;
    };
    readonly generateCSN: {
        readonly describe: "When set to true a CSN file will be generated for each service definition in the output directory.";
        readonly type: "boolean";
        readonly default: false;
        readonly deprecated: "Since v2.12.0. This functionality will be discontinued.";
    };
};
/**
 * @internal
 */
export declare function createOptionsFromConfig(configPath: string): GeneratorOptions;
export {};
//# sourceMappingURL=generator-options.d.ts.map