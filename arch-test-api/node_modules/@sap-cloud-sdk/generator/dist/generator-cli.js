#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseCmdArgs = void 0;
const util_1 = require("@sap-cloud-sdk/util");
const yargs_1 = __importDefault(require("yargs"));
const generator_1 = require("./generator");
const generator_options_1 = require("./generator-options");
const options_parser_1 = require("./options-parser");
const logger = (0, util_1.createLogger)({
    package: 'generator',
    messageContext: 'generator-cli'
});
logger.info('Parsing args...');
(0, generator_1.generate)(parseCmdArgs())
    .then(() => logger.info('Generation of services finished successfully.'))
    .catch(err => {
    logger.error(new util_1.ErrorWithCause('Generation of services failed.', err));
    process.exit(1);
});
/**
 * @internal
 */
function parseCmdArgs() {
    const command = yargs_1.default.command('$0', 'OData Client Code Generator for OData v2 and v4. Generates TypeScript code from `.edmx`/`.xml` files for usage with the SAP Cloud SDK for JavaScript.');
    const optionsWithoutDefaults = (0, options_parser_1.getOptionsWithoutDefaults)(generator_options_1.generatorOptionsCli);
    for (const key in optionsWithoutDefaults) {
        command.option(key, optionsWithoutDefaults[key]);
    }
    const parsedOptions = command
        .config('config', 'Instead of specifying the options on the command line, you can also provide a path to a .json file holding these options. ' +
        'The file must be a valid .json file, where the keys correspond to the command line flags without dashes. Paths will be interpreted relative to the config file.', configPath => (0, generator_options_1.createOptionsFromConfig)(configPath))
        .alias('config', 'c')
        .alias('version', 'v')
        .alias('help', 'h')
        .strict(true)
        .parserConfiguration({
        'strip-aliased': true,
        'strip-dashed': true
    })
        .recommendCommands();
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const { _, $0, ...userOptions } = parsedOptions.argv;
    return userOptions;
}
exports.parseCmdArgs = parseCmdArgs;
//# sourceMappingURL=generator-cli.js.map