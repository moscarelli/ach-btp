import { Options } from 'yargs';
import { ParsedOptions } from './generator-options';
type Option = Options & {
    replacedBy?: string;
    describe: string;
};
/**
 * @internal
 * Remove defaults from CLI options. This is necessary to handle default setting on our own.
 * @param options - CLI options, record, that maps option name to option config.
 * @returns CLI options without default values.
 */
export declare function getOptionsWithoutDefaults<CliOptionsT extends Record<string, Option>>(options: CliOptionsT): CliOptionsT;
/**
 * @internal
 * Parse options for programmatic and CLI use.
 * Warn, if deprecated options are used or duplicate.
 * Adds defaults for options not set by the user.
 * @param options - Available CLI options along with their configuration.
 * @param userOptions - Options as set by user, either through the CLI or programmatically.
 * @returns Parsed options with default values.
 */
export declare function parseOptions<CliOptionsT extends Record<string, Option>, GeneratorOptionsT extends Record<string, any>>(options: CliOptionsT, userOptions: GeneratorOptionsT): ParsedOptions<GeneratorOptionsT, CliOptionsT>;
export {};
//# sourceMappingURL=options-parser.d.ts.map