"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getApiName = exports.serviceClass = exports.serviceBuilder = void 0;
const util_1 = require("@sap-cloud-sdk/util");
const voca_1 = __importDefault(require("voca"));
const match_entity_1 = require("../entity-api/match-entity");
const de_serializers_generic_types_1 = require("../de-serializers-generic-types");
const generator_utils_1 = require("../../generator-utils");
/**
 * @internal
 */
function serviceBuilder(serviceName, oDataVersion) {
    return (0, util_1.codeBlock) `
  export function ${voca_1.default.decapitalize(serviceName)}<${(0, de_serializers_generic_types_1.getGenericTypesWithDefault)(oDataVersion)}>(
  deSerializers: Partial<DeSerializers<${(0, de_serializers_generic_types_1.getGenericTypes)(oDataVersion)}>> = defaultDeSerializers as any
  ):${serviceName}<DeSerializers<${(0, de_serializers_generic_types_1.getGenericTypes)(oDataVersion)}>>  
  {
  return new ${serviceName}(mergeDefaultDeSerializersWith(deSerializers))
  }
  `;
}
exports.serviceBuilder = serviceBuilder;
/**
 * @internal
 */
function serviceClass(service) {
    const serviceHasEntities = (0, generator_utils_1.hasEntities)(service);
    return (0, util_1.codeBlock) `class ${service.className}<DeSerializersT extends DeSerializers = DefaultDeSerializers> {
    private apis: Record<string, any> = {};
    private deSerializers: DeSerializersT;

    constructor(deSerializers: DeSerializersT) {
      this.deSerializers = deSerializers;
    }

    private initApi(key: string, ctor: new (...args: any[]) => any): any {
      if (!this.apis[key]) {
        this.apis[key] = new ctor(this.deSerializers);
      }
      return this.apis[key];
    }

    ${service.entities
        .map(entity => getEntityApiFunction(entity, service))
        .join('\n\n')}
    
    ${getActionFunctionImports(service, 'functionImports')}
    
    ${getActionFunctionImports(service, 'actionImports')}

    ${getOperations(service)}
    
    ${serviceHasEntities ? getBatch() : ''}

    ${serviceHasEntities ? getChangeset() : ''}
  }`;
}
exports.serviceClass = serviceClass;
function getActionFunctionImports(service, type) {
    const operations = service[type];
    if (!(operations === null || operations === void 0 ? void 0 : operations.length)) {
        return '';
    }
    const lines = operations.map(f => `${f.name}:(parameter:${f.parametersTypeName}<DeSerializersT>)=>${f.name}(parameter,this.deSerializers)`);
    return (0, util_1.codeBlock) `
  /**
   * @deprecated Since v2.13.0. Use {@link operations} instead.
   */
  get ${type}( ) {
    return {${lines.join(',')}}
  }
  `;
}
function getOperations(service) {
    var _a, _b;
    const operations = [];
    if ((_a = service.functionImports) === null || _a === void 0 ? void 0 : _a.length) {
        operations.push('...this.functionImports');
    }
    if ((_b = service.actionImports) === null || _b === void 0 ? void 0 : _b.length) {
        operations.push('...this.actionImports');
    }
    return operations.length
        ? (0, util_1.codeBlock) `
    /**
     * Get unbound functions and actions.
     */
    get operations() {
      return { ${operations.join(', ')} };
    }`
        : '';
}
function getBatch() {
    return (0, util_1.codeBlock) `
  get batch(): typeof batch {
    return batch;
  }
  `;
}
function getChangeset() {
    return (0, util_1.codeBlock) `
  get changeset(): typeof changeset {
    return changeset;
  }
  `;
}
function getEntityApiFunction(entity, service) {
    return (0, util_1.codeBlock) `get ${getApiName(entity.className)}(): ${entity.className}Api<DeSerializersT> { 
    ${entity.navigationProperties.length
        ? withLinks(entity, service)
        : withoutLinks(entity)}    
  }`;
}
function withoutLinks(entity) {
    return `return ${getApiInitializer(entity.className)}`;
}
function withLinks(entity, service) {
    return `const api = ${getApiInitializer(entity.className)};
  const linkedApis = [
    ${entity.navigationProperties
        .map(navProp => getApiInitializer((0, match_entity_1.matchEntity)(navProp, service).className))
        .join(',\n')}
  ];
  api._addNavigationProperties(linkedApis);
  return api`;
}
function getApiInitializer(entityClassName) {
    return `this.initApi('${getApiName(entityClassName)}', ${entityClassName}Api)`;
}
/**
 * @internal
 * @param entityName - Name of the Entity for which the api property name is build.
 * @returns apiName e.g. testEntityApi if the entity is called TestEntity.
 */
function getApiName(entityName) {
    return `${voca_1.default.decapitalize(entityName)}Api`;
}
exports.getApiName = getApiName;
//# sourceMappingURL=class.js.map