"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isEntityNotDeserializable = exports.parseOperationReturnType = void 0;
const util_1 = require("@sap-cloud-sdk/util");
const voca_1 = __importDefault(require("voca"));
const generator_utils_1 = require("../../generator-utils");
const service_1 = require("../../generator-without-ts-morph/service");
const vdm_types_1 = require("../../vdm-types");
const edmx_to_vdm_util_1 = require("../edmx-to-vdm-util");
/**
 * @internal
 */
function parseOperationReturnType(returnType, entities, complexTypes, extractResponse, serviceName, isBound) {
    if (!returnType) {
        return getVoidReturnType();
    }
    const isCollection = (0, edmx_to_vdm_util_1.isCollectionType)(returnType.Type);
    const isNullable = typeof returnType === 'undefined' ? false : (0, generator_utils_1.isNullableProperty)(returnType);
    const edmType = findEdmType(returnType.Type);
    if (edmType) {
        return getEdmReturnType(isCollection, isNullable, edmType, extractResponse, isBound);
    }
    const filteredEntities = findEntityTypes(returnType.Type, entities);
    if (filteredEntities.length) {
        return getEntityReturnType(isCollection, isNullable, filteredEntities, serviceName);
    }
    const complexType = findComplexType(returnType.Type, complexTypes);
    if (complexType) {
        return getComplexReturnType(isCollection, isNullable, complexType);
    }
    throw Error(`Unable to find a return type for name ${JSON.stringify(returnType)} in entities ${entities
        .map(e => `${e.entityTypeNamespace}.${e.entityTypeName}`)
        .join(', ')}.`);
}
exports.parseOperationReturnType = parseOperationReturnType;
function findEdmType(returnType) {
    returnType = (0, edmx_to_vdm_util_1.parseTypeName)(returnType);
    if (returnType.startsWith('Edm.')) {
        return returnType;
    }
}
function findEntityTypes(returnType, entities) {
    returnType = (0, edmx_to_vdm_util_1.parseTypeName)(returnType);
    return entities.filter(e => `${e.entityTypeNamespace}.${e.entityTypeName}` === returnType);
}
function findComplexType(returnType, complexTypes) {
    returnType = (0, edmx_to_vdm_util_1.parseTypeName)(returnType);
    return complexTypes.find(({ namespace, originalName }) => `${namespace}.${originalName}` === returnType);
}
function getVoidReturnType() {
    return {
        returnTypeCategory: vdm_types_1.VdmReturnTypeCategory.VOID,
        returnType: 'undefined',
        builderFunction: '(val) => undefined',
        isNullable: false,
        isCollection: false
    };
}
function getEdmReturnType(isCollection, isNullable, edmType, extractResponse, isBound) {
    const typeMapping = (0, edmx_to_vdm_util_1.getTypeMappingActionFunction)(edmType);
    const valueAlias = 'val';
    const extracted = isCollection ? valueAlias : extractResponse(valueAlias);
    return {
        returnTypeCategory: vdm_types_1.VdmReturnTypeCategory.EDM_TYPE,
        returnType: typeMapping.jsType,
        builderFunction: `(${valueAlias}) => edmToTs(${extracted}, '${typeMapping.edmType}', deSerializers${isBound ? ' || defaultDeSerializers' : ''})`,
        isNullable,
        isCollection
    };
}
function getEntityReturnType(isCollection, isNullable, entities, serviceName) {
    if (!entities.length) {
        throw Error('Could not get entity return type for function import. No matching entity types found.');
    }
    return entities.length === 1
        ? {
            returnTypeCategory: vdm_types_1.VdmReturnTypeCategory.ENTITY,
            returnType: (0, util_1.first)(entities).className,
            builderFunction: `${voca_1.default.decapitalize(serviceName)}(deSerializers).${(0, service_1.getApiName)((0, util_1.first)(entities).className)}`,
            isNullable,
            isCollection
        }
        : {
            returnTypeCategory: vdm_types_1.VdmReturnTypeCategory.NEVER,
            returnType: 'never',
            isNullable,
            isCollection,
            unsupportedReason: vdm_types_1.VdmUnsupportedReason.ENTITY_NOT_DESERIALIZABLE
        };
}
function getComplexReturnType(isCollection, isNullable, complexType) {
    return {
        returnTypeCategory: vdm_types_1.VdmReturnTypeCategory.COMPLEX_TYPE,
        returnType: complexType.typeName,
        builderFunction: `(data) => entityDeserializer(
        deSerializers || defaultDeSerializers
        ).deserializeComplexType(data, ${complexType.typeName})`,
        isNullable,
        isCollection
    };
}
/**
 * @internal
 */
function isEntityNotDeserializable(returnType) {
    return (returnType.returnTypeCategory === vdm_types_1.VdmReturnTypeCategory.NEVER &&
        returnType.unsupportedReason ===
            vdm_types_1.VdmUnsupportedReason.ENTITY_NOT_DESERIALIZABLE);
}
exports.isEntityNotDeserializable = isEntityNotDeserializable;
//# sourceMappingURL=operation-return-type.js.map