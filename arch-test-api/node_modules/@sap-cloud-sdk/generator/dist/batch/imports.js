"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.importBatchDeclarations = void 0;
const ts_morph_1 = require("ts-morph");
const util_1 = require("@sap-cloud-sdk/util");
const imports_1 = require("../imports");
const vdm_types_1 = require("../vdm-types");
/**
 * @internal
 */
function importBatchDeclarations(service) {
    var _a;
    return [
        (0, imports_1.odataImportDeclaration)([
            'CreateRequestBuilder',
            'DeleteRequestBuilder',
            'DeSerializers',
            'GetAllRequestBuilder',
            'GetByKeyRequestBuilder',
            'ODataBatchRequestBuilder',
            'UpdateRequestBuilder',
            ...(service.functionImports.length
                ? ['FunctionImportRequestBuilder']
                : []),
            ...(((_a = service.actionImports) === null || _a === void 0 ? void 0 : _a.length)
                ? ['ActionImportRequestBuilder']
                : []),
            'BatchChangeSet'
        ], service.oDataVersion),
        {
            kind: ts_morph_1.StructureKind.ImportDeclaration,
            moduleSpecifier: '@sap-cloud-sdk/util',
            namedImports: ['transformVariadicArgumentToArray']
        },
        {
            kind: ts_morph_1.StructureKind.ImportDeclaration,
            moduleSpecifier: './index',
            namedImports: getNamedImports(service)
        }
    ];
}
exports.importBatchDeclarations = importBatchDeclarations;
function getNamedImports(service) {
    var _a, _b, _c;
    const actionsAndFunctions = [
        ...service.functionImports,
        ...((_a = service.actionImports) !== null && _a !== void 0 ? _a : [])
    ];
    const complexReturnTypesOfActionImports = actionsAndFunctions
        .filter(({ returnType }) => returnType.returnTypeCategory === vdm_types_1.VdmReturnTypeCategory.COMPLEX_TYPE)
        .map(withComplex => withComplex.returnType.returnType);
    return (0, util_1.unique)([
        ...service.entities.map(e => e.className),
        ...service.functionImports.map(f => f.parametersTypeName),
        ...((_c = (_b = service.actionImports) === null || _b === void 0 ? void 0 : _b.map(a => a.parametersTypeName)) !== null && _c !== void 0 ? _c : []),
        ...complexReturnTypesOfActionImports
    ]);
}
//# sourceMappingURL=imports.js.map