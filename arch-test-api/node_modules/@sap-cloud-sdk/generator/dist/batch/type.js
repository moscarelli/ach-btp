"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeRequestType = exports.readRequestType = void 0;
const ts_morph_1 = require("ts-morph");
const operations_1 = require("../operations");
/**
 * @internal
 */
function readRequestType(service) {
    return {
        kind: ts_morph_1.StructureKind.TypeAlias,
        name: `Read${service.className}RequestBuilder<DeSerializersT extends DeSerializers>`,
        isExported: true,
        type: getReadRequestType(service)
    };
}
exports.readRequestType = readRequestType;
/**
 * @internal
 */
function writeRequestType(service) {
    return {
        kind: ts_morph_1.StructureKind.TypeAlias,
        name: `Write${service.className}RequestBuilder<DeSerializersT extends DeSerializers>`,
        isExported: true,
        type: getWriteRequestType(service)
    };
}
exports.writeRequestType = writeRequestType;
function getWriteRequestType(service) {
    var _a, _b;
    const createUpdateDeleteBuilderTypes = service.entities.map(e => `CreateRequestBuilder<${e.className}<DeSerializersT>, DeSerializersT> | UpdateRequestBuilder<${e.className}<DeSerializersT>, DeSerializersT> | DeleteRequestBuilder<${e.className}<DeSerializersT>, DeSerializersT>`);
    const functionImportsReturnTypes = service.functionImports
        .filter(fn => fn.httpMethod.toLowerCase() !== 'get')
        .map(fn => (0, operations_1.operationReturnType)(fn));
    const actionImportsReturnTypes = (_b = (_a = service.actionImports) === null || _a === void 0 ? void 0 : _a.map(fn => (0, operations_1.operationReturnType)(fn))) !== null && _b !== void 0 ? _b : [];
    return [
        ...createUpdateDeleteBuilderTypes,
        ...functionImportsReturnTypes,
        ...actionImportsReturnTypes
    ].join(' | ');
}
function getReadRequestType(service) {
    const getAllBuilderTypes = service.entities.map(e => `GetAllRequestBuilder<${e.className}<DeSerializersT>, DeSerializersT>`);
    const getByKeyBuilderTypes = service.entities.map(e => `GetByKeyRequestBuilder<${e.className}<DeSerializersT>, DeSerializersT>`);
    const functionImportsReturnTypes = service.functionImports
        .filter(fn => fn.httpMethod.toLowerCase() === 'get')
        .map(fn => (0, operations_1.operationReturnType)(fn));
    return [
        ...getAllBuilderTypes,
        ...getByKeyBuilderTypes,
        ...functionImportsReturnTypes
    ].join(' | ');
}
//# sourceMappingURL=type.js.map