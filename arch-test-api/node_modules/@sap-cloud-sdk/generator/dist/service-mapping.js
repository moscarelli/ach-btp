"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServicePath = exports.serviceMappingFile = exports.serviceMapping = exports.readServiceMapping = exports.VALUE_IS_UNDEFINED = void 0;
const path_1 = require("path");
const util_1 = require("@sap-cloud-sdk/util");
const swagger_util_1 = require("./swagger-parser/swagger-util");
const logger = (0, util_1.createLogger)({
    package: 'generator',
    messageContext: 'service-mapping'
});
/**
 * @internal
 */
exports.VALUE_IS_UNDEFINED = 'VALUE_IS_UNDEFINED';
/**
 * @internal
 */
function readServiceMapping(options) {
    return ((options.serviceMapping &&
        (0, util_1.readJSON)(options.serviceMapping)) ||
        {});
}
exports.readServiceMapping = readServiceMapping;
/**
 * @internal
 */
function serviceMapping(services) {
    return services.reduce((vdmMapping, service) => {
        vdmMapping[service.originalFileName] = {
            directoryName: service.directoryName,
            servicePath: service.servicePath,
            npmPackageName: service.npmPackageName
        };
        return vdmMapping;
    }, {});
}
exports.serviceMapping = serviceMapping;
/**
 * @internal
 */
function serviceMappingFile(services) {
    return JSON.stringify(serviceMapping(services), null, 2) + util_1.unixEOL;
}
exports.serviceMappingFile = serviceMappingFile;
/**
 * @internal
 */
function getServicePath(metadata, serviceMappingIn) {
    let servicePath = (serviceMappingIn === null || serviceMappingIn === void 0 ? void 0 : serviceMappingIn.servicePath) ||
        servicePathFromSelfLink(metadata.edmx.selfLink) ||
        (0, swagger_util_1.servicePathFromSwagger)(metadata.swagger);
    if (!servicePath || servicePath === exports.VALUE_IS_UNDEFINED) {
        logger.error(`[ ${(0, path_1.parse)(metadata.edmx.path.toString()).name} ] No service path could be determined from available metadata! Replace VALUE_IS_UNDEFINED in the "service-mapping.json".`);
        servicePath = exports.VALUE_IS_UNDEFINED;
    }
    return servicePath;
}
exports.getServicePath = getServicePath;
function servicePathFromSelfLink(selfLink) {
    if (selfLink) {
        return selfLink
            .replace(/^https?:\/\//, '')
            .replace(/\/\$metadata$/, '')
            .replace(/^[^/]+/, '');
    }
}
//# sourceMappingURL=service-mapping.js.map