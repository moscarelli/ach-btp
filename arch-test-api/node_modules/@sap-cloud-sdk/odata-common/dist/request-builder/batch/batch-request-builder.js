"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BatchRequestBuilder = void 0;
const util_1 = require("@sap-cloud-sdk/util");
const request_builder_base_1 = require("../request-builder-base");
const odata_batch_request_config_1 = require("../../request/odata-batch-request-config");
const batch_request_serializer_1 = require("./batch-request-serializer");
const batch_change_set_1 = require("./batch-change-set");
/**
 * Create a batch request to invoke multiple requests as a batch. The batch request builder accepts retrieve requests, i. e. {@link GetAllRequestBuilder | getAll} and {@link GetByKeyRequestBuilder | getByKey} requests and change sets, which in turn can contain {@link CreateRequestBuilder | create}, {@link UpdateRequestBuilder | update} or {@link DeleteRequestBuilder | delete} requests.
 * The retrieve and change sets will be executed in order, while the order within a change set can vary.
 * @internal
 */
class BatchRequestBuilder extends request_builder_base_1.MethodRequestBuilder {
    /**
     * Creates an instance of ODataBatchRequestBuilder.
     * @param defaultServicePath - Service path.
     * @param requests - An array of retrieve requests or change sets.
     */
    constructor(defaultServicePath, requests) {
        var _a;
        super(new odata_batch_request_config_1.ODataBatchRequestConfig(defaultServicePath));
        this.defaultServicePath = defaultServicePath;
        this.requests = requests;
        this.deSerializers = (_a = (0, util_1.first)(Object.values(this.getEntityToApiMap()))) === null || _a === void 0 ? void 0 : _a.deSerializers;
    }
    withSubRequestPathType(subRequestPathType) {
        this.requestConfig.withSubRequestPathType(subRequestPathType);
        return this;
    }
    build(destination) {
        return destination
            ? super.build(destination).then(request => this.setPayload(request))
            : this.setPayload(super.build());
    }
    /**
     * Execute request and return an {@link @sap-cloud-sdk/http-client!HttpResponse}.
     * @param destination - Destination or DestinationFetchOptions to execute the request against.
     * @returns A promise resolving to an {@link @sap-cloud-sdk/http-client!HttpResponse}.
     */
    async executeRaw(destination) {
        return this.build(destination).then(request => request.execute());
    }
    getEntityToApiMap() {
        return this.requests.reduce((apis, request) => ({
            ...apis,
            ...(request instanceof batch_change_set_1.BatchChangeSet
                ? buildMapEntries(request)
                : buildMapEntry(request))
        }), {});
    }
    setPayload(request) {
        request.config.payload = (0, batch_request_serializer_1.serializeBatchRequest)(this, {
            subRequestPathType: request.config.subRequestPathType,
            destination: request.destination
        });
        return request;
    }
}
exports.BatchRequestBuilder = BatchRequestBuilder;
function isActionOrFunctionImport(req) {
    var _a;
    return !!((_a = req.requestConfig['functionImportName']) !== null && _a !== void 0 ? _a : req.requestConfig['actionImportName']);
}
function buildMapEntries(changeSet) {
    return changeSet.requests.reduce((changeSetApis, changesetReq) => isActionOrFunctionImport(changesetReq)
        ? changeSetApis
        : { ...changeSetApis, ...buildMapEntry(changesetReq) }, {});
}
function buildMapEntry(request) {
    return isActionOrFunctionImport(request)
        ? {}
        : {
            [request._entityApi.entityConstructor._entityName]: request._entityApi
        };
}
//# sourceMappingURL=batch-request-builder.js.map