"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ODataRequestConfig = void 0;
const util_1 = require("@sap-cloud-sdk/util");
const internal_1 = require("@sap-cloud-sdk/http-client/internal");
const logger = (0, util_1.createLogger)({
    package: 'odata-common',
    messageContext: 'odata-request-config'
});
/**
 * Parent class for all OData request configs like `getAll`, `delete` or `count`.
 */
class ODataRequestConfig {
    /**
     * Creates an instance of ODataRequest.
     * @param method - HTTP method of the request.
     * @param defaultServicePath - Default path of the according service.
     * @param defaultHeadersOrContentType - The default headers of the given request as an object. When passing a string only set the content type header will be set. Setting the content type only is deprecated since v1.30.0.
     */
    constructor(method, defaultServicePath, defaultHeadersOrContentType) {
        this.method = method;
        this.defaultServicePath = defaultServicePath;
        this.defaultHeaders = {
            'content-type': 'application/json',
            accept: 'application/json'
        };
        this.parameterEncoder = internal_1.encodeTypedClientRequest;
        this._customHeaders = {};
        this._customQueryParameters = {};
        this._customRequestConfiguration = {};
        this._appendedPaths = [];
        this._fetchCsrfToken = true;
        this._timeout = undefined;
        if (defaultServicePath === util_1.VALUE_IS_UNDEFINED) {
            logger.warn('The service path is undefined in "_defaultServicePath".');
        }
        if (typeof defaultHeadersOrContentType === 'string') {
            this.defaultHeaders['content-type'] = defaultHeadersOrContentType;
        }
        else {
            this.defaultHeaders = (0, util_1.mergeIgnoreCase)(this.defaultHeaders, defaultHeadersOrContentType);
        }
    }
    set timeout(timeout) {
        this._timeout = timeout;
    }
    get timeout() {
        return this._timeout;
    }
    set customHeaders(headers) {
        this._customHeaders = {};
        this.addCustomHeaders(headers);
    }
    get customHeaders() {
        return this._customHeaders;
    }
    set customQueryParameters(queryParameters) {
        this._customQueryParameters = {};
        this.addCustomQueryParameters(queryParameters);
    }
    get customQueryParameters() {
        return this._customQueryParameters;
    }
    set customRequestConfiguration(requestConfiguration) {
        this._customRequestConfiguration = {};
        this.addCustomRequestConfiguration(requestConfiguration);
    }
    get customRequestConfiguration() {
        return this._customRequestConfiguration;
    }
    get appendedPaths() {
        return this._appendedPaths;
    }
    set fetchCsrfToken(fetchCsrfToken) {
        this._fetchCsrfToken = fetchCsrfToken;
    }
    get fetchCsrfToken() {
        return this._fetchCsrfToken;
    }
    /**
     * Add custom headers to the request. This is useful in case you want to provide your own authorization headers for example.
     * @param headers - Key-value pairs where the key is the name of a header property and the value is the respective value.
     */
    addCustomHeaders(headers) {
        Object.entries(headers).forEach(([key, value]) => {
            // Enforce lower case as HTTP headers are case-insensitive
            this.customHeaders[key.toLowerCase()] = value;
        });
    }
    /**
     * Add custom query parameters to the request. This is useful in case your OData service allows non-standard query parameters.
     * @param queryParameters - Key-value pairs where the key is the name of a query parameter and the value is the respective value.
     */
    addCustomQueryParameters(queryParameters) {
        Object.entries(queryParameters).forEach(([key, value]) => {
            this.customQueryParameters[key] = value;
        });
    }
    /**
     * Add custom request configuration to the request.
     * @param requestConfiguration - Key-value pairs where the key is the name of a request configuration and the value is the respective value.
     */
    addCustomRequestConfiguration(requestConfiguration) {
        Object.entries(requestConfiguration).forEach(([key, value]) => {
            this.customRequestConfiguration[key] = value;
        });
    }
    appendPath(...path) {
        this.appendedPaths.push(...path);
    }
    prependDollarToQueryParameters(params) {
        return Object.entries(params).reduce((newParams, [key, value]) => {
            newParams[`$${key}`] = value;
            return newParams;
        }, {});
    }
}
exports.ODataRequestConfig = ODataRequestConfig;
//# sourceMappingURL=odata-request-config.js.map